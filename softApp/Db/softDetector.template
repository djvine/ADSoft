#===================================================
# Template file: softDetector.template
# Database for the records specific to the soft detector driver
# David Vine
# September 28, 2016

include ADBase.template

record(bo, "$(P)$(R)ArrayMode")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))ARRAY_MODE")
    field(ZNAM, "Overwrite")
    field(ONAM, "Append")
    field(ZSV,  "NO_ALARM") # AND_NO_SURPRISES
    field(OSV,  "MINOR")
    field(VAL,  0)
}

record(bi, "$(P)$(R)ArrayMode_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))ARRAY_MODE_RBV")
    field(SCAN, "I/O Intr")
    field(ZNAM, "Overwrite")
    field(ONAM, "Append")
}

record(bo, "$(P)$(R)PartialArrayCallbacks")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PARTIAL_ARRAY_CALLBACKS")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
    field(ZSV,  "NO_ALARM") 
    field(OSV,  "MINOR")
    field(VAL,  1)
}

record(bi, "$(P)$(R)PartialArrayCallbacks_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))PARTIAL_ARRAY_CALLBACKS_RBV")
    field(SCAN, "I/O Intr")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
}

record(longout, "$(P)$(R)NumElements")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))NUM_ELEMENTS")
}

record(longin, "$(P)$(R)NumElements_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))NUM_ELEMENTS")
    field(SCAN, "I/O Intr")
}

record(longout, "$(P)$(R)CurrentPixel")
{
    field(DTYP, "asynInt32")
    field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))CURRENT_PIXEL")
}

record(longin, "$(P)$(R)CurrentPixel_RBV")
{
    field(DTYP, "asynInt32")
    field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))CURRENT_PIXEL_RBV")
    field(SCAN, "I/O Intr")
}


record(waveform, "$(P)$(R)ArrayInInt8")
{
    field(DTYP, "asynInt8ArrayOut")
    field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))ARRAY_IN_INT8")
    field(NELM, "$(NELEMENTS)")
    field(FTVL, "CHAR")
}

record(waveform, "$(P)$(R)ArrayInUInt8")
{
    field(DTYP, "asynInt8ArrayOut")
    field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))ARRAY_IN_UINT8")
    field(NELM, "$(NELEMENTS)")
    field(FTVL, "UCHAR")
}

record(waveform, "$(P)$(R)ArrayInInt16")
{
    field(DTYP, "asynInt16ArrayOut")
    field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))ARRAY_IN_INT16")
    field(NELM, "$(NELEMENTS)")
    field(FTVL, "SHORT")
}

record(waveform, "$(P)$(R)ArrayInUInt16")
{
    field(DTYP, "asynInt16ArrayOut")
    field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))ARRAY_IN_UINT16")
    field(NELM, "$(NELEMENTS)")
    field(FTVL, "USHORT")
}

record(waveform, "$(P)$(R)ArrayInInt32")
{
    field(DTYP, "asynInt32ArrayOut")
    field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))ARRAY_IN_INT32")
    field(NELM, "$(NELEMENTS)")
    field(FTVL, "LONG")
}

record(waveform, "$(P)$(R)ArrayInUInt32")
{
    field(DTYP, "asynInt32ArrayOut")
    field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))ARRAY_IN_UINT32")
    field(NELM, "$(NELEMENTS)")
    field(FTVL, "ULONG")
}

record(waveform, "$(P)$(R)ArrayInFloat32")
{
    field(DTYP, "asynFloat32ArrayOut")
    field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))ARRAY_IN_FLOAT32")
    field(NELM, "$(NELEMENTS)")
    field(FTVL, "FLOAT")
}
record(waveform, "$(P)$(R)ArrayIn")
{
    field(DTYP, "asynFloat64ArrayOut")
    field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))ARRAY_IN")
    field(NELM, "$(NELEMENTS)")
    field(FTVL, "DOUBLE")
}
